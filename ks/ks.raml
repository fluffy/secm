#%RAML 0.8

title: Fluffy KeyServer API

documentation:
 - title: Overview
   content: |
   
       The key server simply provide a place to store keys and create controll
       who can access them.  The users that creates a key is known as the
       owner. The owner of key is also a user and admistrator of the key. Any
       admistrator can add other users as an admistrator or user of that
       key. Only users that have been added as a user of they key can retreive
       the value of the key. When a key is created, the user creating provides
       the value of key and the server returns a keyID that can be used in
       future operations on that key.

       Each key has a main key and also an integrity key. The integrity keys can
       be retrived by any user that has access to the /iKey interface. Typically
       the main keys will be used by users to encrypt objects for other users
       while the iKey will be used by the users to and cloud services to all the
       user to prove to the cloud server that it is allowed to use that key.

       The user must authenticated with OpenID Connect for all requests. 
                       
version: v1
baseUri: https://ks.fluffy.im/{version}
protocols: [ HTTPS ]
mediaType: application/json

/key:
    post:
        description: Create a new key with given value and returns a new keyID as a parameter called "keyID" in a JSON object. 
        body:
            application/x-www-form-urlencoded:
                formParameters:
                    keyVal:
                        description: |

                                Value of new key. Typically a JOSE key but they
                                key server does not care what it is and just
                                treats it as opaque data.
                                                
                        type: string
                        required: true 
                    iKeyVal:
                        description: |

                                Value of new integreity key. Typically a JOSE
                                key but they key server does not care what it is
                                and just treats it as opaque data. This is a
                                secondary key that is typically used for
                                integrity.
                                                
                        type: string
                    
        responses:
            200:
                body:
                    application/json:
                        example: |
                                 { "keyID": "3584784052509480386" }
                     
                  
            
    /{keyID}:
        uriParameters:
            keyID:
                type: integer
        get:
            description: Retrieve a specific key asscoated with keyID
            responses:
                401:
                    description: Some error in retreiving an authorized user
                404:
                    description: This keyID does not exist
                200:
                    body:
                        text/plain:
        /admin/{adminID}:
            put:
                description: Adds the user {adminID} as an admistrator for the key
                responses:
                    200:
                    409:
                        description: This adminID is alreaady an admin of this key
        /user/{userID}:
            put:
                description: Adds the user {adminID} as an user of that key so they can read it
                responses:
                    200:
                    409:
                        description: This userID is alreaady an user of this key
        /owner:
            get:
                description: Returns the userID of the owner of the key
                responses:
                    200:
                        body:
                            application/json:
                                example: |
                                        { "ownerIDs": [ "1" ] }
        /admins:
            get:
                description: Returrns the userIDs of the all the admistrators of the key
                responses:
                    200:
                        body:
                            application/json:
                                example: |
                                        { "adminIDs": [ "1","2","3","4" ] }
        /users:
            get:
                description: Returrns the userIDs of the all the users of the key 
                responses:
                    200:
                        body:
                            application/json:
                                example: |
                                        { "userIDs": [ "1" ] }

/identity/me:
    get:
        description: Returns userID for this user. 
        responses:
            401:
                description: Some error in retreiving an authorized user 
            200:
                body:
                    application/json:
                        example: |
                            { "userID": "1" }
        
/ikey:
    /{keyID}:
        uriParameters:
            keyID:
                type: integer
        get:
            description: Retrieve a only the integrity key asscoated with keyID 
            responses:
                404:
                    description: This keyID does not exist
                200:
                    body:
                        text/plain:
